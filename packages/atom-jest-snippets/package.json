{
  "_args": [
    [
      {
        "raw": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
        "spec": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
        "type": "local"
      },
      "/private/tmp/apm-install-dir-118417-97527-nxn6kp.zj5ekit3xr"
    ]
  ],
  "_from": "../d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
  "_id": "atom-jest-snippets@2.1.0",
  "_inCache": true,
  "_location": "/atom-jest-snippets",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
    "spec": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
  "_shasum": "a52d4a4d0e809d649e8b7ace3fb1425707c1093d",
  "_shrinkwrap": null,
  "_spec": "/private/tmp/d-118417-97527-1hjowlf.ia6jolayvi/package.tgz",
  "_where": "/private/tmp/apm-install-dir-118417-97527-nxn6kp.zj5ekit3xr",
  "author": {
    "name": "Bryce Osterhaus"
  },
  "bugs": {
    "url": "https://github.com/bryceosterhaus/atom-jest-snippets/issues"
  },
  "configSchema": {
    "toggleSemicolons": {
      "type": "boolean",
      "default": true,
      "description": "When enabled adds semicolons to the end of the expressions(atom restart required)"
    },
    "quoteType": {
      "type": "string",
      "default": "'",
      "description": "The quote type to use when generating snippets(atom restart required)",
      "enum": [
        "'",
        "\"",
        "`"
      ]
    }
  },
  "dependencies": {
    "mustache": "^2.3.0"
  },
  "description": "Snippets for Jest testing framework",
  "devDependencies": {},
  "engines": {
    "atom": ">0.50.0"
  },
  "homepage": "https://github.com/bryceosterhaus/atom-jest-snippets#readme",
  "keywords": [
    "atom",
    "jest",
    "snippets"
  ],
  "license": "MIT",
  "main": "./src/atom-jest-snippets.js",
  "name": "atom-jest-snippets",
  "optionalDependencies": {},
  "readme": "# Atom Jest Snippets\n[![apm](https://img.shields.io/apm/v/atom-jest-snippets.svg?style=flat-square)](https://atom.io/packages/atom-jest-snippets)\n[![apm](https://img.shields.io/apm/dm/atom-jest-snippets.svg?style=flat-square)](https://atom.io/packages/atom-jest-snippets)\n\nAn [Atom](https://atom.io/) snippet library for [Jest](https://facebook.github.io/jest/). This library uses ES6 syntax.\n\nInstall via `apm install atom-jest-snippets`\n\n## Settings\n**Toggle Semicolons:**  [Default: with semicolons] Allows the user to toggle between having semicolons on or off.\n\n## Snippets Available\n\nThe **⇥** means the `TAB` key\n\n| Trigger | Content |\n| ------- | ------- |\n| `jcleartimers→`|`jest.clearAllTimers()` |\n| `jclearmocks→`|`jest.clearAllMocks()` |\n| `jdisableautomock→`|`jest.disableAutomock()` |\n| `jdomo→`|`jest.doMock($1)` |\n| `jdonmo→`|`jest.dontMock($1)` |\n| `jenableautomock→`|`jest.enableAutomock()` |\n| `jfn→`|`jest.fn($1)` |\n| `jgenmock→`|`jest.genMockFromModule($1)` |\n| `jismock→`|`jest.isMockFunction($1)` |\n| `jmock→`|`jest.mock($1)` |\n| `jresetallmocks→`|`jest.resetAllMocks()` |\n| `jresetmodules→`|`jest.resetModules()` |\n| `jrestore→`|`jest.restoreAllMocks()` |\n| `jrunticks→`|`jest.runAllTicks()` |\n| `jruntimers→`|`jest.runAllTimers()` |\n| `jrunpendtimers→`|`jest.runOnlyPendingTimers()` |\n| `jsetmock→`|`jest.setMock($1)` |\n| `jspy→`|`jest.spyOn($1)` |\n| `junmock→`|`jest.unmock($1)` |\n| `jfaketimers→`|`jest.useFakeTimers($1)` |\n| `jrealtimers→`|`jest.useRealTimers($1)` |\n| ------- | ------- |\n| `enot→`|`expect($1).not` |\n| `eres→`|`expect($1).resolves` |\n| `erej→`|`expect($1).rejects` |\n| `ebe→`|`expect($1).toBe($2)` |\n| `ecloseto→`|`expect($1).toBeCloseTo($2, $3)` |\n| `edef→`|`expect($1).toBeDefined()` |\n| `efalsy→`|`expect($1).toBeFalsy()` |\n| `egreater→`|`expect($1).toBeGreaterThan($2)` |\n| `egreateror→`|`expect($1).toBeGreaterThanOrEqual($2)` |\n| `einst→`|`expect($1).toBeInstanceOf($2)` |\n| `eless→`|`expect($1).toBeLessThan($2)` |\n| `elessor→`|`expect($1).toBeLessThanOrEqual($2)` |\n| `enull→`|`expect($1).toBeNull()` |\n| `etruthy→`|`expect($1).toBeTruthy()` |\n| `eundef→`|`expect($1).toBeUndefined()` |\n| `econ→`|`expect($1).toContain($2)` |\n| `econeq→`|`expect($1).toContainEqual($2)` |\n| `eeq→`|`expect($1).toEqual($2)` |\n| `ecall→`|`expect($1).toHaveBeenCalled()` |\n| `ecallt→`|`expect($1).toHaveBeenCalledTimes($2)` |\n| `ecallw→`|`expect($1).toHaveBeenCalledWith($2)` |\n| `eleng→`|`expect($1).toHaveLength($2)` |\n| `eprop→`|`expect($1).toHaveProperty($2)` |\n| `emat→`|`expect($1).toMatch($2)` |\n| `ematob→`|`expect($1).toMatchObject($2)` |\n| `ematsnap→`|`expect($1).toMatchSnapshot($2)` |\n| `ethr→`|`expect($1).toThrow($2)` |\n| `ethrsn→`|`expect($1).toThrow($2)` |\n| `exp→`|`expect($1)$2` |\n| `eanyt→`|`expect.anything($1)` |\n| `eany→`|`expect.any($1)` |\n| `earrc→`|`expect.arrayContaining($1)` |\n| `expa→`|`expect.assertions($1)` |\n| `exph→`|`expect.hasAssertions()` |\n| `eobjc→`|`expect.objectContaining($1)` |\n| `estrc→`|`expect.stringContaining($1)` |\n| `estrm→`|`expect.stringMatching($1)` |\n| ------- | ------- |\n| `aftera→`|`afterAll(() => {$1})` |\n| `aftere→`|`afterEach(() => {$1})` |\n| `beforea→`|`beforeAll(() => {$1})` |\n| `beforee→`|`beforeEach(() => {$1})` |\n| `desc→`|`describe('$1', () => {$2})` |\n| `it→`|`it('$1', () => {$2})` |\n| `test→`|`test('$1', () => {$2})` |\n| ------- | ------- |\n| `mclear→`|`.mockClear()` |\n| `mimpl→`|`.mockImplementation($1)` |\n| `mimplonce→`|`.mockImplementationOnce($1)` |\n| `mreset→`|`.mockReset()` |\n| `mrett→`|`.mockReturnThis()` |\n| `mretval→`|`.mockReturnValue($1)` |\n| `mretvalo→`|`.mockReturnValueOnce($1)` |\n| ------- | ------- |\n\n\n#### Custom\n`jsetup→`\n\n```js\nimport $1 from './$1'\n\ndescribe('$1', () => {\n  test('$2', () => {\n      $3\n  })\n})\n```\n\n## Development\n\n```sh\n$ cd ~/.atom/packages\n$ git clone https://github.com/webbushka/atom-react-snippets.git\n$ cd atom-react-snippets\n$ apm install\n$ apm link\n```\n\n## Contributing\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bryceosterhaus/atom-jest-snippets.git"
  },
  "scripts": {
    "build": "node ./build.js"
  },
  "version": "2.1.0"
}
